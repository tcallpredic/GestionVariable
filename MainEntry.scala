// Importation des librairies
import java.util.Calendar
import java.text.SimpleDateFormat
import org.apache.spark.sql._
import projectClass.VariableHandler


// Objet entrée du Module
object MainEntry {
  var niveauMenu = 0
  var inputUser = ""
  var path = ""

  val spark: SparkSession = SparkSession.builder
    .appName("Init-Module") // optional and will be autogenerated if not specified
    .master("local[*]") // avoid hardcoding the deployment environment
    .config("spark.sql.warehouse.dir", "/tmp/dataD")
    .config("spark.executor.memory", "2g")
    .config("spark.executor.cores", 1)
    .config("spark.driver.memory", "2g")
    .config("spark.driver.cores", 1)
    .getOrCreate

  def main(args: Array[String]): Unit = {
    DisplayInfo()
    if(GetPath()== true) {
      val vHandler = new VariableHandler(path, spark)
      DisplayMainMenu(vHandler)
    }
  }

  // Menu principal : Affichage
  def DisplayMainMenu(vHandler:VariableHandler): Unit ={
    niveauMenu = 0
    println()
    println("----------------------------------------")
    println("[Menu]")
    println("\t"+"Charger une description  :: (L)")
    println("\t"+"Créer une description    :: (C)")
    println("\t"+"Quitter le menu          :: (Q)")
    print("> ")
    MainMenuHandler(vHandler)

  }

  // Menu principal :  Gestion des options
  def MainMenuHandler(vHandler:VariableHandler): Unit ={
    inputUser = scala.io.StdIn.readLine()
    inputUser match{
      case "L" =>
        if (vHandler.LoadDescription() == true) {
          DisplaySubMenu(vHandler)
        } else {
          DisplayMainMenu(vHandler)
          }

      case "C" =>
          if (vHandler.CreateDescription() == true) {
            DisplaySubMenu(vHandler)
          } else {
            DisplayMainMenu(vHandler)
            }

      case "Q" =>
        Quit(vHandler)

      case _ =>
        DisplayMainMenu(vHandler)
    }
  }

  // Sous Menu :: Affichage
  def DisplaySubMenu(vHandler:VariableHandler): Unit ={
    niveauMenu = 1
    println()
    println("----------------------------------------")
    println("[Menu Principal]")
    println("\t"+"[Menu Gestion des Variables]")
    println("\t"+"\t"+"Ajouter une variable (CV)")
    println("\t"+"\t"+"Supprimer une variable (RV)")
    println("\t"+"\t"+"List des variable (LV)")
    println("\t"+"\t"+"Assigner une valeur a une variable (AV)")
    println("\t"+"\t"+"Enregistrer (SV)")
    println("\t"+"\t"+"Retour (R)")
    println("\t"+"\t"+"Quitter le menu (Q)")
    print("> ")
    SubMenuHandler(vHandler)
  }


  // Sous Menu : Gestion ds options
  def SubMenuHandler(vHandler:VariableHandler): Unit ={
    inputUser = scala.io.StdIn.readLine()
    inputUser match {
      case "CV" =>
        vHandler.AddVariable()
        DisplaySubMenu(vHandler)

      case "RV" =>
        vHandler.RemoveVariable()
        DisplaySubMenu(vHandler)

      case "AV" =>
        vHandler.SetVariableValue()
        DisplaySubMenu(vHandler)

      case "SV" =>
        vHandler.SaveParquetFile()
        DisplaySubMenu(vHandler)

      case "LV" =>
        vHandler.DisplayListVariable()
        DisplaySubMenu(vHandler)

      case "R" =>
        ReturnMainMenu(vHandler)

      case "Q" =>
        Quit(vHandler)

      case _ =>
        println("Saisie invalide !")
        DisplaySubMenu(vHandler)
    }
  }

  // Initialisation de laffichage du Module
  def DisplayInfo(): Unit ={
    val today = Calendar.getInstance().getTime()
    val dayFormat = new SimpleDateFormat("dd")
    val monthFormat = new SimpleDateFormat("MM")
    val yearFormat = new SimpleDateFormat("YYYY")
    val hourFormat = new SimpleDateFormat("hh")
    val minuteFormat = new SimpleDateFormat("mm")
    val AmPmFormat = new SimpleDateFormat("a")
    // On efface qq lignes
    for (i<-1 to 25) {
        println()
      }
    println("Tcall Predict")
    println("Module : Gestion des variables")
    val now = Calendar.getInstance()
    println("Session : "+dayFormat.format(today)+"/"+monthFormat.format(today)+"/"+yearFormat.format(today)+
        " - "+hourFormat.format(today)+":"+minuteFormat.format(today)+" | "+AmPmFormat.format(today))
    println("----------------------------------------")
  }

  // Détermination du chemin des fichiers parquet
  def GetPath():Boolean={
    var req = ""
    println("Saisir le chemin des descriptions")
    print("> ")
    path = scala.io.StdIn.readLine()
    path match {
      case "" =>
        println("Le chemin ne peut être vide ! ")
        println("Voulez-vous ressaisir le chemin de la description à nouveau (O/N) ?")
        print("> ")
        req = scala.io.StdIn.readLine()
        if (req == "O"){
          GetPath()} else {
          false }
      case _ =>
        true
    }
  }

  // Fonction de fermeture propre du module
  def Quit(vHandler:VariableHandler): Unit ={
    if(niveauMenu == 0){

    }else{
      if(!vHandler.GetSavedStatus()){
        var confirm = ""
        println("Description non enregistrée ! Pour enregistrer (SV)")
        print("> ")
        confirm = scala.io.StdIn.readLine()
        if(confirm == "SV"){
          vHandler.SaveParquetFile()
        }
      }
    }

  }

  // Retour au Menu principal
  def ReturnMainMenu(vHandler:VariableHandler): Unit ={
    if(!vHandler.GetSavedStatus()){
      var confirm = ""
      println("Description non enregistrée !")
      println("\t"+"Pour enregistrer (SV)")
      println("\t"+"Pour retourner au Menu principal (R)")
      print("> ")
      confirm = scala.io.StdIn.readLine()
      confirm match {
        case "SV" =>
          vHandler.SaveParquetFile()
        case "R" =>
          DisplayMainMenu(vHandler)
      }
    }
  }

  // Fin du code
}